*ledger.txt* Plugin for the ledger filetype.


                                                  *ledger* *ledger-plugin*

Contents:

        Commands............|ledger-invoking|
        Source................|ledger-source|
        Usage..................|ledger-usage|
        Tips....................|ledger-tips|
        Settings............|ledger-settings|
        Completion........|ledger-completion|
        License..............|ledger-license|


==============================================================================
USAGE                                                           *ledger-usage*

Copy each file to the corresponding directory in your ~/.vim directory or
install using Pathogen.

You can also use a modeline like this in every ledger file:

    vim:filetype=ledger

==============================================================================
TIPS                                                             *ledger-tips*

Tips and useful commands

* Try account-completion (as explained below). If you use YouCompleteMe, you
  should disable it for Ledger files. Put this in your .vimrc:

        if exists('g:ycm_filetype_blacklist')
          call extend(g:ycm_filetype_blacklist, { 'ledger': 1 })
        endif

* `:call ledger#transaction_date_set('.'), "auxiliary")`

  will set today's date as the auxiliary date of the current transaction. You
  can use also "primary" or "unshift" in place of "auxiliary". When you pass
  "unshift" the old primary date will be set as the auxiliary date and today's
  date will be set as the new primary date.
  To use a different date pass a date measured in seconds since 1st Jan 1970
  as the third argument.

* `:call ledger#transaction_state_set(line('.'), '*')`

  sets the state of the current transaction to '*'. You can use this in custom
  mappings.

* `:call ledger#transaction_state_toggle(line('.'), ' *?!')`

  will toggle through the provided transaction states. You can map this to
  double-clicking for example:

        noremap <silent><buffer> <2-LeftMouse>\
        :call ledger#transaction_state_toggle(line('.'), ' *?!')<CR>

* `:LedgerAlign`

  moves the amount expression of a posting so that the decimal separator is
  aligned at the column specified by g:ledger_align_at. If an amount has no
  decimal point, the imaginary decimal point to the right of the least
  significant digit will align. The command acts on a range, with the default
  being the current line.

  The decimal separator can be set using `g:ledger_decimal_sep`. The default
  value of `g:ledger_decimal_sep` is `'.'`.

  See below for the recommended mappings.

* `:call ledger#align_amount_at_cursor()`

  aligns the amount under the cursor and append/prepend the default currency.
  The default currency can be set using `g:ledger_default_commodity`. Whether
  the commodity should be inserted before the amount or appended to it can be
  configured with the boolean flag `g:ledger_commodity_before` (the default
  value is 1). A separator between the commodity and the amount may be set
  using `g:ledger_commodity_sep`.

  See below for the recommended mappings.

* `:call ledger#autocomplete_and_align()`

  when the cursor is on a number or immediately after it, invokes
  `ledger#align_amount_at_cursor()` to align it and add the default currency;
  otherwise, performs autocompletion. If you define the following mappings in
  your `.vimrc` then you may perform both autocompletion and alignment using
  the <Tab> key:

        au FileType ledger inoremap <silent> <Tab> \
        <C-r>=ledger#autocomplete_and_align()<CR>
        au FileType ledger vnoremap <silent> <Tab> :LedgerAlign<CR>

  Alternatively, you may create a file `.vim/after/ftplugin/ledger.vim`
  containing the following definitions:

        inoremap <silent> <buffer> <Tab> \
        <C-r>=ledger#autocomplete_and_align()<CR>
        vnoremap <silent> <buffer> <Tab> :LedgerAlign<CR>

  Now, you may type `asset:check<Tab><Space>123.45<Tab>`, and have the
  account name autocompleted and `$123.45` properly aligned (assuming your
  default commodity is set to `'$'`). Or you may press <Tab> in Visual mode
  to align a number of transactions at once.

* `:call ledger#entry()`

  enters a new transaction based on the text in the current line.
  The text in the current line is replaced by the new transaction.
  This is a front end to `ledger entry`.

==============================================================================
SETTINGS                                                     *ledger-settings*

Configuration

Include the following let-statements somewhere in your `.vimrc` to modify the
behaviour of the ledger filetype.

* Number of columns that will be used to display the foldtext. Set this when
  you think that the amount is too far off to the right.

        let g:ledger_maxwidth = 80

* String that will be used to fill the space between account name and amount in
  the foldtext. Set this to get some kind of lines or visual aid.

        let g:ledger_fillstring = '    -'

* If you want the account completion to be sorted by level of detail/depth
  instead of alphabetical, include the following line:

        let g:ledger_detailed_first = 1

* By default vim will fold ledger transactions, leaving surrounding blank lines
  unfolded. You can use 'g:ledger_fold_blanks' to hide blank lines following a
  transaction.

        let g:ledger_fold_blanks = 0

  A value of 0 will disable folding of blank lines, 1 will allow folding of a
  single blank line between transactions; any larger value will enable folding
  undconditionally.

  Note that only lines containing no trailing spaces are considered for
  folding. You can take advantage of this to disable this feature on a
  case-by-case basis.

* Decimal separator:

        let g:ledger_decimal_sep = '.'

* Specify at which column decimal separators should be aligned:

        let g:ledger_align_at = 60

* Default commodity used by `ledger#align_amount_at_cursor()`:

        let g:ledger_default_commodity = ''

* Flag that tells whether the commodity should be prepended or appended to the
  amount:

        let g:ledger_commodity_before = 1

* String to be put between the commodity and the amount:

        let g:ledger_commodity_sep = ''
==============================================================================
COMPLETION                                                 *ledger-completion*

Omni completion is currently implemented for account names only.

### Accounts

Account names are matched by the start of every sub-level. When you
insert an account name like this:

    Asse<C-X><C-O>

You will get a list of top-level accounts that start like this.

Go ahead and try something like:

    As:Ban:Che<C-X><C-O>

When you have an account like this, 'Assets:Bank:Checking' should show up.

When you want to complete on a virtual transaction, it's currently best
to keep the cursor in front of the closing bracket. Of course you can
insert the closing bracket after calling the completion, too.

==============================================================================
LICENSE                                                       *ledger-license*

https://github.com/ledger/vim-ledger

Copyright 2009-2013 Johann Kl√§hn
Copyright 2009 Stefan Karrmann
Copyright 2005 Wolfgang Oertl

This program is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation, either version 2 of the License, or (at your
option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
Public License for more details.

You should have received a copy of the GNU General Public License along
with this program. If not, see <http://www.gnu.org/licenses/>.


vim:ts=8 sw=8 noexpandtab tw=78 ft=help:

